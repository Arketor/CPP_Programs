Class - Blueprint of a datatype. Simply it means a datatype only(user defined datatype) which can
store type of data as specified in its definition.

eg : Below is a datatype which can store an integer and a string
class abc
{
    int a;
    string k;
};


                                                           Notes:

1. Class members are Private by default whereas in Struct they are Public
2. Constructor is always declared in Public Section
3. If no constructor is made by us, then Compiler will create two constructors: Default Constructor and Copy Constructor

eg : In below example we didnt create any constructor but compiler created default for us. So the below program will compile fine.

#include<bits/stdc++.h>
using namespace std;

class abc
{
	public:
		void show()
		{
			cout<<"asd "<<k<<endl;
		}
	private:
		int k;
};

int main()
{
	abc o1;
	o1.show();
	return 0;
}



4. If we make any constructor then Compiler will not make default constructor for us

   But that doesnt mean we have to create default constructor necessarily. So in this case
   
	a) If we create any object without any parameter (which means it will search for deafult constructor which is not present in this case) 
	   then it will be a compilation error, even though other objects might have paramaters. So even if there is only 1 object with no parameters,
	   then it will be a compilation error.
	   
	   eg : 
	   #include<bits/stdc++.h>
	   using namespace std;

	   class abc
	   {
	    public:
		
		abc(int a)
		{
			k=a;
		}
		void show()
		{
			cout<<"asd "<<k<<endl;
		}
	    private:
		int k;
	   };

	int main()
	{
		abc o1(111);
		abc o2; // compilation error on this line
		o1.show();
		o2.show();
		return 0;
	}
	   
	b) If all objects have atleast 1 parameter, then it will not throw any compilation error.
	
	   eg : Below program runs fine without any compilation error.
	   
	   #include<bits/stdc++.h>
	   using namespace std;

           class abc
           {
	        public:
                abc(int a)
		{
			k=a;
		}
		void show()
		{
			cout<<"asd "<<k<<endl;
		}
	        private:
		int k;
           };

           int main()
           {
           	abc o1(111);
           	o1.show();
           	return 0;
           }




5. If we make any constructor but not a copy constructor, then only copy constructor will be made by Compiler.
6. If we make Copy Constructor then no constructor will be made by Compiler
7. Examples showing different ways to define a constructor:
    class abc
    {
	    int a,b;
	    string c,d;
	    public:
        abc(int x,int y)              Or                 abc(int x,int y): a(x), b(y){}     
	    {
		    a=x;
		    b=y;
	    }
    };
   
8. Examples showing different ways to define an object (Suppose class name is abc):
   
   abc o0;                  // Zero Argument
   abc o1=abc();            // Zero Argument
   abc o2();                // Not an object, it is a function with return type abc
   abc *o3=new abc;         // Not an object but a pointer to an object of type abc with zero arguments.
   			    // Also we can write this line as : 
			    				abc *aa=new abc();
   abc o4(4);               // Single Argument
   abc o5=4;                // Single Argument     This type is only for constructors with single argument
   abc o6=abc(4);           // Single Argument
   abc o7(1,2);             // Double Argument
   abc o8 =abc(1,2);        // Double Argument
   abc *o9 =new abc(1,21);  // Not an object but a pointer to an object of type abc
   
   

Sample Code 1: 

#include<bits/stdc++.h>
using namespace std;
class abc
{
    int a,b;
    public:
    abc():a(10),b(20) // Or We can write this part as abc(){a=10;b=20;cout<<"Constructor\n";} i.e in a normal way
    {
        cout<<"Constructor\n";
    }
    abc(int k,int l):a(k),b(l)
    {
        cout<<"Parameterised Constructor\n";
    }
    void get(int,int);
    ~abc();
    void show()
    {
        cout<<a<<" "<<b<<endl;
    }
};
abc::~abc()
{
    cout<<"Destructor\n";
}
void abc::get(int k,int l)
{
    a=k;
    b=l;
}
int main()
{
    abc o1;
    o1.get(3,5);
    o1.show();
    abc o2;
    o2.show();
    abc o3(13,3113);
    o3.show();
    return 0;
}
   
   


























Sample Code 2:

#include<bits/stdc++.h>
using namespace std;

class abc
{
    int a,b,*c;
    public:
    abc()
    {
        a=0;
        b=0;
        c=new int(0);
    }
    abc(int x,int y,int z)
    {
        a=x;
        b=y;
        c=new int(z);
    }
    void show();
    ~abc()
    {
        cout<<"Destructor\n";
        delete c;
    }
};

void abc::show()
{
    cout<<this->a<<" "<<this->b<<" "<<*(this->c)<<"\n";
}

int main()
{
    abc o1;
    o1.show();
    abc o2(4,2,12);
    o2.show();
    abc o3=abc(3,21,222);
    o3.show();
    abc *o4=new abc(311,121,222);
    o4->show();
    delete o4;
}
